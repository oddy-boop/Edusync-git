-- ==================================================================
-- EduSync Platform - Complete Database Schema
-- Version: 10.0
-- Description: Complete schema with enhanced features, improved indexing,
-- audit trails, and consolidated policies.
-- ==================================================================

-- First, drop all existing tables and functions in correct order
DO $$ 
BEGIN
    -- Drop all tables with CASCADE to handle dependencies
    DROP TABLE IF EXISTS public.audit_logs CASCADE;
    DROP TABLE IF EXISTS public.expenditures CASCADE;
    DROP TABLE IF EXISTS public.staff_attendance CASCADE;
    DROP TABLE IF EXISTS public.admission_applications CASCADE;
    DROP TABLE IF EXISTS public.news_posts CASCADE;
    DROP TABLE IF EXISTS public.timetable_entries CASCADE;
    DROP TABLE IF EXISTS public.assignments CASCADE;
    DROP TABLE IF EXISTS public.behavior_incidents CASCADE;
    DROP TABLE IF EXISTS public.attendance_records CASCADE;
    DROP TABLE IF EXISTS public.academic_results CASCADE;
    DROP TABLE IF EXISTS public.student_arrears CASCADE;
    DROP TABLE IF EXISTS public.fee_payments CASCADE;
    DROP TABLE IF EXISTS public.school_fee_items CASCADE;
    DROP TABLE IF EXISTS public.school_announcements CASCADE;
    DROP TABLE IF EXISTS public.students CASCADE;
    DROP TABLE IF EXISTS public.teachers CASCADE;
    DROP TABLE IF EXISTS public.user_roles CASCADE;
    DROP TABLE IF EXISTS public.schools CASCADE;

    -- Drop existing functions
    DROP FUNCTION IF EXISTS public.get_my_role() CASCADE;
    DROP FUNCTION IF EXISTS public.log_audit_event() CASCADE;
END $$;

-- ==================================================================
-- Section 1: Core Multi-Tenant and Profile Tables
-- ==================================================================

-- Table: schools
CREATE TABLE public.schools (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying (255) NOT NULL,
    domain character varying (100) UNIQUE,
    address text,
    phone character varying (50),
    email character varying (255),
    logo_url text,
    current_academic_year character varying (20) DEFAULT '2023-2024',
    -- Payment Configuration
    enable_online_payments boolean DEFAULT false,
    payment_receipt_prefix varchar(10),
    next_receipt_number bigint DEFAULT 1,
    receipt_footer_text text,
    paystack_public_key text,
    paystack_secret_key text,
    -- Email Configuration
    enable_email_notifications boolean DEFAULT true,
    resend_api_key text,
    email_footer_signature text,
    -- SMS Configuration
    enable_sms_notifications boolean DEFAULT false,
    twilio_account_sid text,
    twilio_auth_token text,
    twilio_phone_number text,
    twilio_messaging_service_sid text,
    sms_template_fee_payment text,
    sms_template_result_published text,
    sms_template_attendance_alert text,
    -- AI Configuration
    google_api_key text,
    -- Location Settings
    school_latitude double precision,
    school_longitude double precision,
    check_in_radius_meters integer,
    -- Social Media
    facebook_url text,
    twitter_url text,
    instagram_url text,
    linkedin_url text,
    -- Website Content
    homepage_title text,
    homepage_subtitle text,
    hero_image_url_1 text,
    hero_image_url_2 text,
    hero_image_url_3 text,
    hero_image_url_4 text,
    hero_image_url_5 text,
    homepage_welcome_title text,
    homepage_welcome_message text,
    homepage_welcome_image_url text,
    homepage_why_us_title text,
    homepage_why_us_points jsonb,
    homepage_news_title text,
    about_mission text,
    about_vision text,
    about_image_url text,
    admissions_intro text,
    admissions_pdf_url text,
    admissions_steps jsonb,
    programs_intro text,
    team_members jsonb,
    program_creche_image_url text,
    program_kindergarten_image_url text,
    program_primary_image_url text,
    program_jhs_image_url text,
    donate_image_url text,
    -- Theme Settings
    color_primary text,
    color_accent text,
    color_background text,
    -- Timestamps
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: user_roles
CREATE TABLE public.user_roles (
    user_id uuid PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE,
    school_id bigint REFERENCES public.schools (id) ON DELETE CASCADE,
    role character varying (50) NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: teachers
CREATE TABLE public.teachers (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL UNIQUE REFERENCES auth.users (id) ON DELETE CASCADE,
    full_name character varying (255) NOT NULL,
    email character varying (255) UNIQUE NOT NULL,
    date_of_birth date,
    location text,
    contact_number character varying (50),
    subjects_taught text [],
    assigned_classes text [],
    is_deleted boolean DEFAULT false NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: students
CREATE TABLE public.students (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    auth_user_id uuid UNIQUE REFERENCES auth.users (id) ON DELETE CASCADE,
    student_id_display character varying (20) NOT NULL,
    full_name character varying (255) NOT NULL,
    date_of_birth date,
    grade_level character varying (50),
    guardian_name text,
    guardian_contact character varying (50),
    contact_email character varying (255),
    total_paid_override numeric(10, 2),
    notification_preferences jsonb,
    is_deleted boolean DEFAULT false NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT unique_student_id_per_school UNIQUE (school_id, student_id_display)
);

-- Table: admission_applications
CREATE TABLE public.admission_applications (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    full_name text NOT NULL,
    date_of_birth date NOT NULL,
    student_religion text,
    student_location text,
    grade_level_applying_for text NOT NULL,
    previous_school_name text,
    father_name text,
    mother_name text,
    guardian_contact text NOT NULL,
    guardian_email text NOT NULL,
    guardian_religion text,
    guardian_location text,
    status text NOT NULL DEFAULT 'pending',
    notes text,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- ==================================================================
-- Section 2: School Operations Tables
-- ==================================================================

-- Table: school_announcements
CREATE TABLE public.school_announcements (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    author_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    author_name text,
    title text NOT NULL,
    message text NOT NULL,
    target_audience character varying (50) NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: news_posts
CREATE TABLE public.news_posts (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    author_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    author_name text,
    title text NOT NULL,
    content text,
    image_url text,
    published_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: timetable_entries
CREATE TABLE public.timetable_entries (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    teacher_id uuid REFERENCES public.teachers (id) ON DELETE CASCADE,
    day_of_week text NOT NULL,
    periods jsonb NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: assignments
CREATE TABLE public.assignments (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    teacher_id uuid REFERENCES public.teachers (id) ON DELETE CASCADE,
    teacher_name text,
    class_id character varying (50) NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    due_date date NOT NULL,
    file_url text,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- ==================================================================
-- Section 3: Financial Tables
-- ==================================================================

-- Table: school_fee_items
CREATE TABLE public.school_fee_items (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    grade_level text NOT NULL,
    term text NOT NULL,
    description text NOT NULL,
    amount numeric(10, 2) NOT NULL,
    academic_year character varying (20) NOT NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT positive_fee_amount CHECK (amount > 0)
);

-- Table: fee_payments
CREATE TABLE public.fee_payments (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    payment_id_display text UNIQUE NOT NULL,
    student_id_display text NOT NULL,
    student_name text,
    grade_level text,
    amount_paid numeric(10, 2) NOT NULL,
    payment_date date NOT NULL,
    payment_method text NOT NULL,
    term_paid_for text,
    notes text,
    received_by_name text,
    received_by_user_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT positive_payment_amount CHECK (amount_paid > 0)
);

-- Table: student_arrears
CREATE TABLE public.student_arrears (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    student_name text,
    grade_level_at_arrear text,
    academic_year_from text NOT NULL,
    academic_year_to text NOT NULL,
    amount numeric(10, 2) NOT NULL,
    status text NOT NULL,
    notes text,
    created_by_user_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT positive_arrear_amount CHECK (amount > 0)
);

-- Table: expenditures
CREATE TABLE public.expenditures (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    amount numeric(12, 2) NOT NULL,
    category text NOT NULL,
    date date NOT NULL,
    description text,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT positive_expenditure_amount CHECK (amount > 0)
);

-- ==================================================================
-- Section 4: Academic & Behavioral Tables
-- ==================================================================

-- Table: academic_results
CREATE TABLE public.academic_results (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    auth_user_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    teacher_id uuid REFERENCES public.teachers (id) ON DELETE SET NULL,
    teacher_name text,
    student_id_display text NOT NULL,
    student_name text,
    class_id text,
    term text,
    year text,
    subject_results jsonb,
    overall_average text,
    overall_grade text,
    overall_remarks text,
    published_at timestamp
    with
        time zone,
        requested_published_at timestamp
    with
        time zone,
        approval_status text,
        admin_remarks text,
        approved_by_admin_auth_id uuid,
        approval_timestamp timestamp
    with
        time zone,
        attendance_summary jsonb,
        created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: attendance_records
CREATE TABLE public.attendance_records (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    student_name text,
    class_id text NOT NULL,
    date date NOT NULL,
    status text NOT NULL,
    notes text,
    marked_by_teacher_auth_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    marked_by_teacher_name text,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT unique_attendance_per_day_per_school UNIQUE (
            school_id,
            student_id_display,
            date
        )
);

-- Table: staff_attendance
CREATE TABLE public.staff_attendance (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    teacher_id uuid NOT NULL REFERENCES public.teachers (id) ON DELETE CASCADE,
    date date NOT NULL,
    status text NOT NULL,
    notes text,
    marked_by_admin_id uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone,
        CONSTRAINT unique_staff_attendance_per_day_per_school UNIQUE (school_id, teacher_id, date)
);

-- Table: behavior_incidents
CREATE TABLE public.behavior_incidents (
    id uuid DEFAULT gen_random_uuid () PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    student_name text,
    class_id text,
    teacher_id uuid REFERENCES public.teachers (id) ON DELETE SET NULL,
    teacher_name text,
    type text,
    description text,
    date date,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL,
        updated_at timestamp
    with
        time zone
);

-- Table: audit_logs
CREATE TABLE public.audit_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools (id) ON DELETE CASCADE,
    action text NOT NULL,
    performed_by uuid REFERENCES auth.users (id) ON DELETE SET NULL,
    target_id text,
    details jsonb,
    created_at timestamp
    with
        time zone DEFAULT now () NOT NULL
);

-- ==================================================================
-- Section 5: Create Indexes
-- ==================================================================

-- Core table indexes
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON public.user_roles (user_id);

CREATE INDEX IF NOT EXISTS idx_user_roles_school_id ON public.user_roles (school_id);

CREATE INDEX IF NOT EXISTS idx_teachers_auth_user_id ON public.teachers (auth_user_id);

CREATE INDEX IF NOT EXISTS idx_teachers_school_id ON public.teachers (school_id);

CREATE INDEX IF NOT EXISTS idx_students_auth_user_id ON public.students (auth_user_id);

CREATE INDEX IF NOT EXISTS idx_students_school_id ON public.students (school_id);

CREATE INDEX IF NOT EXISTS idx_students_student_id_display ON public.students (student_id_display);

-- Financial indexes
CREATE INDEX IF NOT EXISTS idx_fee_payments_student_id_display ON public.fee_payments (student_id_display);

CREATE INDEX IF NOT EXISTS idx_fee_payments_school_id ON public.fee_payments (school_id);

CREATE INDEX IF NOT EXISTS idx_student_arrears_student_id_display ON public.student_arrears (student_id_display);

CREATE INDEX IF NOT EXISTS idx_student_arrears_school_id ON public.student_arrears (school_id);

-- Academic indexes
CREATE INDEX IF NOT EXISTS idx_academic_results_student_id_display ON public.academic_results (student_id_display);

CREATE INDEX IF NOT EXISTS idx_academic_results_school_id ON public.academic_results (school_id);

CREATE INDEX IF NOT EXISTS idx_attendance_records_student_id_display ON public.attendance_records (student_id_display);

CREATE INDEX IF NOT EXISTS idx_attendance_records_school_id ON public.attendance_records (school_id);

CREATE INDEX IF NOT EXISTS idx_attendance_records_date ON public.attendance_records (date);

-- ==================================================================
-- Section 6: Create Functions
-- ==================================================================

-- Function to get user's role (used in policies)
CREATE OR REPLACE FUNCTION get_my_role()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  user_role text;
BEGIN
  SELECT role INTO user_role
  FROM public.user_roles
  WHERE user_id = auth.uid();
  RETURN user_role;
END;
$$;

-- Function to get user's school_id (used in policies)
CREATE OR REPLACE FUNCTION get_my_school_id()
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  user_school_id bigint;
BEGIN
  SELECT school_id INTO user_school_id
  FROM public.user_roles
  WHERE user_id = auth.uid();
  RETURN user_school_id;
END;
$$;

-- Function to register a super admin
CREATE OR REPLACE FUNCTION register_super_admin(
    admin_email text,
    admin_password text
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    new_user_id uuid;
BEGIN
    -- Create the user in auth.users (requires proper configuration in Supabase)
    new_user_id := (
        SELECT id FROM auth.users 
        WHERE email = admin_email
        LIMIT 1
    );
    
    IF new_user_id IS NULL THEN
        RAISE EXCEPTION 'User must first sign up through Supabase Auth';
    END IF;

    -- Insert the super_admin role
    INSERT INTO public.user_roles (user_id, role)
    VALUES (new_user_id, 'super_admin')
    ON CONFLICT (user_id) 
    DO UPDATE SET role = 'super_admin';

    RETURN new_user_id;
END;
$$;

-- Function for audit logging
CREATE OR REPLACE FUNCTION log_audit_event()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.audit_logs (
        school_id,
        action,
        performed_by,
        target_id,
        details
    ) VALUES (
        COALESCE(NEW.school_id, OLD.school_id),
        TG_OP,
        auth.uid(),
        CASE 
            WHEN TG_OP = 'DELETE' THEN OLD.id::text
            ELSE NEW.id::text
        END,
        jsonb_build_object(
            'table', TG_TABLE_NAME,
            'old_data', to_jsonb(OLD),
            'new_data', to_jsonb(NEW)
        )
    );
    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ==================================================================
-- Section 7: Create Triggers
-- ==================================================================

-- Audit triggers for important tables
CREATE TRIGGER audit_fee_payments
AFTER INSERT OR UPDATE OR DELETE ON public.fee_payments
FOR EACH ROW EXECUTE FUNCTION log_audit_event();

CREATE TRIGGER audit_academic_results
AFTER INSERT OR UPDATE OR DELETE ON public.academic_results
FOR EACH ROW EXECUTE FUNCTION log_audit_event();

CREATE TRIGGER audit_student_profile
AFTER INSERT OR UPDATE OR DELETE ON public.students
FOR EACH ROW EXECUTE FUNCTION log_audit_event();

-- ==================================================================
-- Section 8: Enable RLS on All Tables
-- ==================================================================

ALTER TABLE public.schools ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.teachers ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.students ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.admission_applications ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.school_announcements ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.news_posts ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.timetable_entries ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.assignments ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.school_fee_items ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.fee_payments ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.student_arrears ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.expenditures ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.academic_results ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.staff_attendance ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.behavior_incidents ENABLE ROW LEVEL SECURITY;

ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;

-- ==================================================================
-- Section 9: Create RLS Policies
-- ==================================================================

-- Schools policies
CREATE POLICY "Schools access policy" ON public.schools FOR ALL USING (
    CASE
        WHEN get_my_role () = 'super_admin' THEN true
        WHEN get_my_role () IN (
            'admin',
            'accountant',
            'teacher',
            'student'
        ) THEN id = get_my_school_id ()
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () = 'super_admin'
    );

-- User roles policy
CREATE POLICY "User roles access policy" ON public.user_roles FOR ALL USING (
    CASE
        WHEN get_my_role () = 'super_admin' THEN true
        ELSE user_id = auth.uid ()
    END
)
WITH
    CHECK (
        get_my_role () = 'super_admin'
    );

-- Teacher policies
CREATE POLICY "Teachers access policy" ON public.teachers FOR ALL USING (
    CASE
        WHEN get_my_role () IN ('admin', 'super_admin') THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () = 'teacher' THEN auth_user_id = auth.uid ()
        ELSE false
    END
)
WITH
    CHECK (
        CASE
            WHEN get_my_role () IN ('admin', 'super_admin') THEN school_id = get_my_school_id ()
            OR get_my_role () = 'super_admin'
            WHEN get_my_role () = 'teacher' THEN auth_user_id = auth.uid ()
            ELSE false
        END
    );

-- Student policies
CREATE POLICY "Students access policy" ON public.students FOR ALL USING (
    CASE
        WHEN get_my_role () IN (
            'admin',
            'super_admin',
            'accountant'
        ) THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () = 'teacher' THEN school_id = get_my_school_id ()
        AND grade_level = ANY(
            SELECT unnest (assigned_classes)
            FROM teachers
            WHERE
                auth_user_id = auth.uid ()
        )
        WHEN get_my_role () = 'student' THEN auth_user_id = auth.uid ()
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () IN ('admin', 'super_admin')
    );

-- Financial policies
CREATE POLICY "Financial records access policy" ON public.fee_payments FOR ALL USING (
    CASE
        WHEN get_my_role () IN (
            'admin',
            'super_admin',
            'accountant'
        ) THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () = 'student' THEN student_id_display = (
            SELECT student_id_display
            FROM students
            WHERE
                auth_user_id = auth.uid ()
        )
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () IN (
            'admin',
            'super_admin',
            'accountant'
        )
    );

-- Academic policies
CREATE POLICY "Academic results access policy" ON public.academic_results FOR ALL USING (
    CASE
        WHEN get_my_role () IN ('admin', 'super_admin') THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () = 'teacher' THEN teacher_id = (
            SELECT id
            FROM teachers
            WHERE
                auth_user_id = auth.uid ()
        )
        WHEN get_my_role () = 'student' THEN student_id_display = (
            SELECT student_id_display
            FROM students
            WHERE
                auth_user_id = auth.uid ()
        )
        ELSE false
    END
)
WITH
    CHECK (
        CASE
            WHEN get_my_role () IN ('admin', 'super_admin') THEN true
            WHEN get_my_role () = 'teacher' THEN teacher_id = (
                SELECT id
                FROM teachers
                WHERE
                    auth_user_id = auth.uid ()
            )
            ELSE false
        END
    );

-- Assignments policy
CREATE POLICY "Assignments access policy" ON public.assignments FOR ALL USING (
    CASE
        WHEN get_my_role () IN ('admin', 'super_admin') THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () = 'teacher' THEN teacher_id = (
            SELECT id
            FROM teachers
            WHERE
                auth_user_id = auth.uid ()
        )
        WHEN get_my_role () = 'student' THEN class_id = (
            SELECT grade_level
            FROM students
            WHERE
                auth_user_id = auth.uid ()
        )
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () IN (
            'admin',
            'super_admin',
            'teacher'
        )
    );

-- Announcements policy
CREATE POLICY "Announcements access policy" ON public.school_announcements FOR ALL USING (
    CASE
        WHEN get_my_role () IN ('admin', 'super_admin') THEN school_id = get_my_school_id ()
        OR get_my_role () = 'super_admin'
        WHEN get_my_role () IN ('teacher', 'student') THEN school_id = get_my_school_id ()
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () IN ('admin', 'super_admin')
    );

-- News posts policy (public readable)
CREATE POLICY "News posts access policy" ON public.news_posts FOR ALL USING (true)
WITH
    CHECK (
        get_my_role () IN ('admin', 'super_admin')
    );

-- Audit logs policy
CREATE POLICY "Audit logs access policy" ON public.audit_logs FOR ALL USING (
    CASE
        WHEN get_my_role () = 'super_admin' THEN true
        WHEN get_my_role () = 'admin' THEN school_id = get_my_school_id ()
        ELSE false
    END
)
WITH
    CHECK (
        get_my_role () IN ('admin', 'super_admin')
    );

-- ==================================================================
-- Section 10: Storage Policies
-- ==================================================================

-- Create storage buckets if they don't exist
INSERT INTO
    storage.buckets (id, name, public)
VALUES (
        'school-assets',
        'school-assets',
        true
    )
ON CONFLICT (id) DO NOTHING;

INSERT INTO
    storage.buckets (id, name, public)
VALUES (
        'assignment-files',
        'assignment-files',
        false
    )
ON CONFLICT (id) DO NOTHING;

-- Storage policies for assignment files
CREATE POLICY "Assignment files access policy" ON storage.objects FOR ALL USING (
    bucket_id = 'assignment-files'
    AND (
        CASE
            WHEN get_my_role () IN ('admin', 'super_admin') THEN true
            WHEN get_my_role () = 'teacher' THEN EXISTS (
                SELECT 1
                FROM public.assignments
                WHERE
                    file_url LIKE '%' || name
                    AND teacher_id = (
                        SELECT id
                        FROM public.teachers
                        WHERE
                            auth_user_id = auth.uid ()
                    )
            )
            WHEN get_my_role () = 'student' THEN EXISTS (
                SELECT 1
                FROM public.assignments
                WHERE
                    file_url LIKE '%' || name
                    AND class_id = (
                        SELECT grade_level
                        FROM public.students
                        WHERE
                            auth_user_id = auth.uid ()
                    )
            )
            ELSE false
        END
    )
)
WITH
    CHECK (
        bucket_id = 'assignment-files'
        AND get_my_role () IN (
            'admin',
            'super_admin',
            'teacher'
        )
    );