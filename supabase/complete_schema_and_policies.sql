-- =========================
-- Section 0: Drop Existing Tables and Policies
-- =========================

DO $$
DECLARE p RECORD;
BEGIN
    -- Drop all policies by name and table
    FOR p IN
        SELECT polname, nsp.nspname, cls.relname
        FROM pg_policy pol
        JOIN pg_class cls ON pol.polrelid = cls.oid
        JOIN pg_namespace nsp ON cls.relnamespace = nsp.oid
        WHERE nsp.nspname = 'public'
    LOOP
        EXECUTE 'DROP POLICY IF EXISTS "' || p.polname || '" ON ' || p.nspname || '.' || p.relname || ' CASCADE';
    END LOOP;
    -- Drop all tables
    FOR p IN SELECT tablename FROM pg_tables WHERE schemaname = 'public' LOOP
        EXECUTE 'DROP TABLE IF EXISTS public.' || p.tablename || ' CASCADE';
    END LOOP;
END $$;

-- Ensure uuid generator available
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- =========================

CREATE TABLE public.schools (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    domain character varying(100) UNIQUE,
    address text,
    phone character varying(50),
    email character varying(255),
    current_academic_year character varying(20) DEFAULT '2023-2024',
    enable_online_payments boolean DEFAULT false,
    payment_receipt_prefix varchar(10),
    next_receipt_number bigint DEFAULT 1,
    receipt_footer_text text,
    paystack_public_key text,
    paystack_secret_key text,
    resend_api_key text,
    google_api_key text,
    twilio_account_sid text,
    twilio_auth_token text,
    twilio_messaging_service_sid text,
    enable_email_notifications boolean DEFAULT true,
    enable_sms_notifications boolean DEFAULT true,
    email_footer_signature text,
    twitter_url text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Table: user_roles
CREATE TABLE public.user_roles (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role text NOT NULL CHECK (role IN ('super_admin', 'admin', 'teacher', 'student', 'accountant')),
    school_id bigint REFERENCES public.schools(id) ON DELETE CASCADE
);

CREATE TABLE public.teachers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    assigned_classes text[],
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Table: students
CREATE TABLE public.students (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    name text NOT NULL,
    grade_level text NOT NULL,
    parent_name text,
    parent_contact text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
CREATE TABLE public.accountants (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Table: admins
CREATE TABLE public.admins (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Section 2: School-Scoped Data Tables
-- =========================

CREATE TABLE public.school_announcements (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    author_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    author_name text,
    title text NOT NULL,
    message text NOT NULL,
    target_audience character varying(50) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);

CREATE TABLE public.news_posts (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    author_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    title text NOT NULL,
    content text NOT NULL,
    published_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.admission_applications (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_name text NOT NULL,
    grade_level_applying_for text NOT NULL,
    previous_school_name text,
    father_name text,
    mother_name text,
    guardian_contact text NOT NULL,
    guardian_religion text,
    guardian_location text,
    status text NOT NULL DEFAULT 'pending',
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.school_fee_items (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    name text NOT NULL,
    amount numeric(10, 2) NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.fee_payments (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    amount numeric(10, 2) NOT NULL,
    payment_method text NOT NULL,
    term_paid_for text,
    notes text,
    received_by_name text,
    received_by_user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

CREATE TABLE public.student_arrears (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    student_name text,
    grade_level_at_arrear text,
    academic_year_from text NOT NULL,
    academic_year_to text NOT NULL,
    amount numeric(10, 2) NOT NULL,
    status text NOT NULL,
    notes text,
    created_by_user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

CREATE TABLE public.expenditures (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    amount numeric(12, 2) NOT NULL,
    category text NOT NULL,
    date date NOT NULL,
    description text
);

-- Table: budget_categories
CREATE TABLE public.budget_categories (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    academic_year character varying(20) NOT NULL,
    category text NOT NULL,
    monthly_limit numeric(12,2) NOT NULL DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);

CREATE TABLE public.academic_results (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    class_id text NOT NULL,
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE SET NULL,
    subject text NOT NULL,
    score numeric(5,2) NOT NULL,
    approval_status text NOT NULL DEFAULT 'pending',
    published_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.attendance_records (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    class_id text NOT NULL,
    date date NOT NULL,
    status text NOT NULL,
    marked_by_teacher_auth_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.staff_attendance (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE CASCADE,
    date date NOT NULL,
    status text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.behavior_incidents (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE SET NULL,
    incident_type text NOT NULL,
    description text,
    date date NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);

CREATE TABLE public.assignments (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE SET NULL,
    class_id text NOT NULL,
    title text NOT NULL,
    description text,
    due_date date NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.timetable_entries (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE SET NULL,
    class_id text NOT NULL,
    subject text NOT NULL,
    period text NOT NULL,
    day_of_week text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.audit_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    action text NOT NULL,
    performed_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    target_id text,
    details jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Section 3: Storage Buckets
-- =========================

INSERT INTO storage.buckets (id, name, public) VALUES ('school-assets', 'school-assets', true) ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES ('assignment-files', 'assignment-files', false) ON CONFLICT (id) DO NOTHING;

-- =========================
-- Section 4: Enable RLS
-- =========================

ALTER TABLE public.schools ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.teachers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.students ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accountants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admins ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.school_announcements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.news_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admission_applications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.school_fee_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fee_payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.student_arrears ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.expenditures ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.academic_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.staff_attendance ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.behavior_incidents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.timetable_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;

-- Allow public (unauthenticated/anonymous) users to read the list of schools
-- This is used by the client-side branch picker to present available branches.
CREATE POLICY IF NOT EXISTS "Public can read schools" ON public.schools
    FOR SELECT
    TO public
    USING ( true );

-- Allow admins and super_admin to manage their own school's settings
CREATE POLICY IF NOT EXISTS "Admins can manage their school's settings" ON public.schools
    FOR ALL
    USING ( get_my_role() = 'super_admin' OR get_my_school_id() = id )
    WITH CHECK ( get_my_role() = 'super_admin' OR get_my_school_id() = id );

-- =========================
-- Section 5: Helper Functions
-- =========================

CREATE OR REPLACE FUNCTION get_my_role() RETURNS text AS $$
    SELECT role FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1;
$$ LANGUAGE sql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION get_my_school_id() RETURNS bigint AS $$
    SELECT school_id FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1;
$$ LANGUAGE sql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION is_my_school_record(record_school_id bigint) RETURNS boolean AS $$
    SELECT get_my_role() = 'super_admin' OR (
        (get_my_role() = 'admin' OR get_my_role() = 'accountant') AND
        get_my_school_id() = record_school_id
    );
$$ LANGUAGE sql SECURITY DEFINER;

-- =========================
-- Section 6: RLS Policies
-- =========================

-- User Roles
CREATE POLICY "User roles access policy" ON public.user_roles FOR ALL USING (get_my_role() = 'super_admin' OR user_id = auth.uid()) WITH CHECK (get_my_role() = 'super_admin' OR user_id = auth.uid());

-- School-Scoped Data (Admins/Accountants)
CREATE POLICY "Admins can manage their school's data" ON public.teachers FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.students FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.accountants FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.admins FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.admission_applications FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.school_announcements FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.news_posts FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.timetable_entries FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.assignments FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.school_fee_items FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.fee_payments FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.student_arrears FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.expenditures FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.academic_results FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.attendance_records FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.staff_attendance FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.behavior_incidents FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.audit_logs FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.attendance_records FOR ALL USING (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.staff_attendance FOR ALL USING (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.behavior_incidents FOR ALL USING (is_my_school_record(school_id));
CREATE POLICY "Admins can manage their school's data" ON public.audit_logs FOR ALL USING (is_my_school_record(school_id));

-- Budget categories
ALTER TABLE public.budget_categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Admins can manage their school's budgets" ON public.budget_categories FOR ALL USING (is_my_school_record(school_id)) WITH CHECK (is_my_school_record(school_id));

-- Teachers
CREATE POLICY "Teachers can view their own profile" ON public.teachers FOR SELECT USING (auth_user_id = auth.uid());
CREATE POLICY "Teachers can update their own profile" ON public.teachers FOR UPDATE USING (auth_user_id = auth.uid()) WITH CHECK (auth_user_id = auth.uid());
CREATE POLICY "Teachers can view students in their assigned classes" ON public.students FOR SELECT USING (grade_level = ANY (ARRAY(SELECT unnest(assigned_classes) FROM public.teachers WHERE auth_user_id = auth.uid())));
CREATE POLICY "Teachers can manage their own timetable" ON public.timetable_entries FOR ALL USING ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id) WITH CHECK ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id);
CREATE POLICY "Teachers can manage their own assignments" ON public.assignments FOR ALL USING ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id) WITH CHECK ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id);
CREATE POLICY "Teachers can manage their own behavior logs" ON public.behavior_incidents FOR ALL USING ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id) WITH CHECK ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id);
CREATE POLICY "Teachers can manage attendance for their assigned classes" ON public.attendance_records FOR ALL USING (class_id = ANY (ARRAY(SELECT unnest(assigned_classes) FROM public.teachers WHERE auth_user_id = auth.uid()))) WITH CHECK (class_id = ANY (ARRAY(SELECT unnest(assigned_classes) FROM public.teachers WHERE auth_user_id = auth.uid())));
CREATE POLICY "Teachers can manage academic results for students in their assigned classes" ON public.academic_results FOR ALL USING (class_id = ANY (ARRAY(SELECT unnest(assigned_classes) FROM public.teachers WHERE auth_user_id = auth.uid()))) WITH CHECK (class_id = ANY (ARRAY(SELECT unnest(assigned_classes) FROM public.teachers WHERE auth_user_id = auth.uid())));
CREATE POLICY "Teachers can view their own attendance" ON public.staff_attendance FOR SELECT USING ((SELECT teachers.id FROM public.teachers WHERE auth_user_id = auth.uid()) = teacher_id);

-- Students
CREATE POLICY "Students can view their own profile" ON public.students FOR SELECT USING (auth_user_id = auth.uid());
CREATE POLICY "Students can view their own results" ON public.academic_results FOR SELECT USING (auth_user_id = auth.uid());
CREATE POLICY "Students can view their own payments" ON public.fee_payments FOR SELECT USING (student_id_display = (SELECT students.student_id_display FROM public.students WHERE students.auth_user_id = auth.uid()));
CREATE POLICY "Students can view their own arrears" ON public.student_arrears FOR SELECT USING (student_id_display = (SELECT students.student_id_display FROM public.students WHERE students.auth_user_id = auth.uid()));
CREATE POLICY "Students can view their own attendance" ON public.attendance_records FOR SELECT USING (student_id_display = (SELECT students.student_id_display FROM public.students WHERE students.auth_user_id = auth.uid()));
CREATE POLICY "Students can view announcements for their school" ON public.school_announcements FOR SELECT USING (target_audience = 'All' OR target_audience = 'Students');
CREATE POLICY "Students can view assignments for their class" ON public.assignments FOR SELECT USING (class_id = (SELECT grade_level FROM public.students WHERE auth_user_id = auth.uid()));

-- News Posts
CREATE POLICY "News posts are public" ON public.news_posts FOR SELECT USING (true);

-- Storage Buckets
CREATE POLICY "Public read access for school assets" ON storage.objects FOR SELECT USING (bucket_id = 'school-assets');
CREATE POLICY "Allow teachers to manage their own assignment files" ON storage.objects FOR ALL USING (bucket_id = 'assignment-files' AND owner = auth.uid()) WITH CHECK (bucket_id = 'assignment-files' AND owner = auth.uid());
CREATE POLICY "Allow admin full access to assignment files" ON storage.objects FOR ALL USING (bucket_id = 'assignment-files' AND (get_my_role() = 'admin' OR get_my_role() = 'super_admin'));
CREATE POLICY "Allow students to read assignment files for their class" ON storage.objects FOR SELECT USING (
  bucket_id = 'assignment-files' AND
  (EXISTS (
    SELECT 1 FROM public.assignments a
    JOIN public.students s ON a.class_id = s.grade_level
    WHERE s.auth_user_id = auth.uid() AND a.id::text = (storage.foldername(name))[2]
  ))
);

-- =========================
-- End of Schema & Policies
-- =========================
