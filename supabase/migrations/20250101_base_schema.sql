-- =========================
-- Base Schema Migration
-- Creates all tables, indexes, functions, and core system features
-- NO RLS policies included - those are in separate role-specific files
-- =========================

BEGIN;

-- Enable extensions
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =========================
-- Core Tables
-- =========================

-- Schools (Multi-tenant base)
CREATE TABLE IF NOT EXISTS public.schools (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying(255) NOT NULL,
    domain character varying(100) UNIQUE,
    address text,
    phone character varying(50),
    email character varying(255),
    current_academic_year character varying(20) DEFAULT '2024-2025',
    enable_online_payments boolean DEFAULT false,
    payment_receipt_prefix varchar(10),
    next_receipt_number bigint DEFAULT 1,
    receipt_footer_text text,
    paystack_public_key text,
    paystack_secret_key text,
    resend_api_key text,
    google_api_key text,
    twilio_account_sid text,
    twilio_auth_token text,
    twilio_messaging_service_sid text,
    twilio_phone_number text,
    enable_email_notifications boolean DEFAULT true,
    enable_sms_notifications boolean DEFAULT true,
    email_footer_signature text,
    twitter_url text,
    facebook_url text,
    instagram_url text,
    linkedin_url text,
    logo_url text,
    check_in_radius_meters text,
    about_image_url text,
    about_mission text,
    about_vision text,
    admissions_intro text,
    admissions_pdf_url text,
    admissions_steps text[],
    color_accent text,
    color_background text,
    color_primary text,
    donate_image_url text,
    hero_image_url_1 text,
    hero_image_url_2 text,
    hero_image_url_3 text,
    hero_image_url_4 text,
    hero_image_url_5 text,
    homepage_news_title text,
    homepage_subtitle text,
    homepage_title text,
    homepage_welcome_image_url text,
    homepage_welcome_message text,
    homepage_welcome_title text,
    homepage_why_us_points text,
    homepage_why_us_title text,
    program_creche_image_url text,
    program_jhs_image_url text,
    program_kindergarten_image_url text,
    program_primary_image_url text,
    program_intro text,
    school_latitude text,
    school_longitude text,
    team_members jsonb DEFAULT '[]'::jsonb,
    platform_paystack_public_key varchar(255),
    platform_paystack_secret_key varchar(255),
    from_email text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- User Roles (Central role management)
CREATE TABLE IF NOT EXISTS public.user_roles (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role text NOT NULL CHECK (role IN ('super_admin', 'admin', 'teacher', 'student', 'accountant')),
    school_id bigint REFERENCES public.schools(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- User Invitations (Role assignment system)
CREATE TABLE IF NOT EXISTS public.user_invitations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NULL REFERENCES auth.users(id) ON DELETE SET NULL,
    email text NOT NULL,
    role text NOT NULL CHECK (role IN ('super_admin', 'admin', 'teacher', 'student', 'accountant')),
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    invited_by uuid NULL REFERENCES auth.users(id) ON DELETE SET NULL,
    status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected', 'expired')),
    created_at timestamptz NOT NULL DEFAULT now(),
    expires_at timestamptz NOT NULL DEFAULT (now() + interval '7 days'),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Teachers
CREATE TABLE IF NOT EXISTS public.teachers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text NOT NULL,
    name text,
    email text,
    phone text,
    assigned_classes text[],
    location text,
    subjects_taught text[],
    date_of_birth date,
    contact_number text,
    is_deleted boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Students
CREATE TABLE IF NOT EXISTS public.students (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    full_name text NOT NULL,
    name text,
    grade_level text NOT NULL,
    parent_name text,
    parent_contact text,
    contact_email text,
    date_of_birth date NOT NULL,
    guardian_contact text NOT NULL,
    guardian_name text NOT NULL,
    total_paid_override text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Admins
CREATE TABLE IF NOT EXISTS public.admins (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Accountants
CREATE TABLE IF NOT EXISTS public.accountants (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Academic Tables
-- =========================

-- Student Results
CREATE TABLE IF NOT EXISTS public.student_results (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    auth_user_id uuid REFERENCES auth.users(id),
    teacher_id bigint REFERENCES public.teachers(id) ON DELETE SET NULL,
    subject_data jsonb NOT NULL,
    term text NOT NULL,
    year text NOT NULL,
    class_id text NOT NULL,
    score numeric(5,2),
    grade text,
    class_score numeric(5,2),
    exam_score numeric(5,2),
    remarks text,
    total_subjects integer,
    position text,
    overall_grade text,
    overall_remarks text,
    average_score numeric(5,2),
    subject_results jsonb,
    approval_status text NOT NULL DEFAULT 'pending' CHECK (approval_status IN ('pending', 'approved', 'rejected')),
    teacher_comment text,
    admin_remarks text,
    attendance_summary text,
    requested_published_at date,
    student_name text,
    teacher_name text,
    published_at timestamp with time zone,
    approval_timestamp timestamp with time zone,
    approved_by_admin_auth_id uuid REFERENCES auth.users(id),
    submitted_by text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Attendance Records
CREATE TABLE IF NOT EXISTS public.attendance_records (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    auth_user_id uuid REFERENCES auth.users(id),
    student_id_display text NOT NULL,
    class_id text NOT NULL,
    date date NOT NULL,
    status text NOT NULL CHECK (status IN ('present', 'absent', 'late', 'excused')),
    marked_by_teacher_auth_id uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Staff Attendance
CREATE TABLE IF NOT EXISTS public.staff_attendance (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint NOT NULL REFERENCES public.teachers(id) ON DELETE CASCADE,
    marked_by_admin_id bigint REFERENCES public.admins(id) ON DELETE CASCADE,
    date date NOT NULL,
    status text NOT NULL CHECK (status IN ('present', 'absent', 'late', 'excused')),
    check_in_time time,
    check_out_time time,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Behavior Incidents
CREATE TABLE IF NOT EXISTS public.behavior_incidents (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    teacher_id bigint NOT NULL REFERENCES public.teachers(id) ON DELETE CASCADE,
    type text NOT NULL,
    description text NOT NULL,
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high')),
    date_occurred date NOT NULL,
    action_taken text,
    class_id text,
    student_name text,
    teacher_name text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Assignments
CREATE TABLE IF NOT EXISTS public.assignments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint NOT NULL REFERENCES public.teachers(id) ON DELETE CASCADE,
    teacher_name text,
    title text NOT NULL,
    description text,
    class_id text NOT NULL,
    subject text NOT NULL,
    due_date date,
    file_url text,
    status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'overdue')),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Timetable Entries
CREATE TABLE IF NOT EXISTS public.timetable_entries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    teacher_id bigint NOT NULL REFERENCES public.teachers(id) ON DELETE CASCADE,
    class_id text NOT NULL,
    subject text NOT NULL,
    periods jsonb NOT NULL,
    day_of_week integer NOT NULL CHECK (day_of_week BETWEEN 1 AND 7),
    start_time time NOT NULL,
    end_time time NOT NULL,
    room text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Financial Tables
-- =========================

-- Platform Pricing (Super admin managed)
CREATE TABLE IF NOT EXISTS public.platform_pricing (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    grade_level text NOT NULL,
    pricing_type text NOT NULL DEFAULT 'per_term' CHECK (pricing_type IN ('per_term', 'per_student', 'fixed')),
    platform_fee decimal(10,2) NOT NULL DEFAULT 0.00,
    currency text NOT NULL DEFAULT 'GHS',
    academic_year text NOT NULL DEFAULT '2024-2025',
    effective_date date NOT NULL DEFAULT CURRENT_DATE,
     is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(grade_level, academic_year, pricing_type)
);

-- School Fees (Calculated with platform fees)
CREATE TABLE IF NOT EXISTS public.school_fees (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    grade_level text NOT NULL,
    term text NOT NULL,
    academic_year text NOT NULL DEFAULT '2024-2025',
    pricing_type text NOT NULL DEFAULT 'per_term' CHECK (pricing_type IN ('per_term', 'per_student', 'fixed')),
    base_amount decimal(10,2) NOT NULL DEFAULT 0.00,
    platform_fee decimal(10,2) NOT NULL DEFAULT 0.00,
    total_amount decimal(10,2) GENERATED ALWAYS AS (base_amount + platform_fee) STORED,
    currency text NOT NULL DEFAULT 'GHS',
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(school_id, grade_level, term, academic_year)
);

-- School Fee Items (Breakdown of fees)
CREATE TABLE IF NOT EXISTS public.school_fee_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    name text NOT NULL,
    amount numeric(10,2) NOT NULL,
    grade_level text,
    term text,
    academic_year text NOT NULL DEFAULT '2024-2025',
    is_mandatory boolean DEFAULT true,
    description text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Fee Payments
CREATE TABLE IF NOT EXISTS public.fee_payments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_name text,
    student_id_display text NOT NULL,
    amount numeric(10,2) NOT NULL,
    payment_method text,
    payment_id_display text,
    received_by_name text,
    received_by_user_id uuid REFERENCES auth.users(id),
    created_by_user_id uuid REFERENCES auth.users(id),
    grade_level text,
    student_auth_user_id uuid REFERENCES auth.users(id),
    term_paid_for text,
    payment_reference text,
    payment_date date DEFAULT CURRENT_DATE,
    term text,
    academic_year text NOT NULL DEFAULT '2024-2025',
    receipt_number text,
    payment_status text DEFAULT 'completed',
    notes text,
    recorded_by uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Student Arrears
CREATE TABLE IF NOT EXISTS public.student_arrears (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    student_name text,
    grade_level_at_arrear text,
    term text NOT NULL,
    academic_year text NOT NULL DEFAULT '2024-2025',
    amount_owed numeric(10,2) NOT NULL,
    amount_paid numeric(10,2) DEFAULT 0,
    balance numeric(10,2) GENERATED ALWAYS AS (amount_owed - amount_paid) STORED,
    due_date date,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Payment Transactions (Platform fee tracking)
CREATE TABLE IF NOT EXISTS public.payment_transactions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    student_id_display text NOT NULL,
    gateway text NOT NULL CHECK (gateway IN ('paystack', 'stripe')),
    gateway_transaction_id text UNIQUE,
    amount decimal(10,2) NOT NULL,
    platform_fee decimal(10,2) NOT NULL DEFAULT 0.00,
    school_amount decimal(10,2) GENERATED ALWAYS AS (amount - platform_fee) STORED,
    currency text NOT NULL DEFAULT 'GHS',
    status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'successful', 'failed', 'cancelled')),
    gateway_response jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Platform Revenue (Revenue tracking)
CREATE TABLE IF NOT EXISTS public.platform_revenue (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    month_year text NOT NULL, -- Format: 'YYYY-MM'
    total_revenue decimal(12,2) NOT NULL DEFAULT 0.00,
    transaction_count integer NOT NULL DEFAULT 0,
    currency text NOT NULL DEFAULT 'GHS',
    gateway text NOT NULL CHECK (gateway IN ('paystack', 'stripe', 'combined')),
    school_count integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(month_year, currency, gateway)
);

-- School Payment Configs
CREATE TABLE IF NOT EXISTS public.school_payment_configs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE UNIQUE,
    paystack_public_key text,
    paystack_secret_key text,
    stripe_public_key text,
    stripe_secret_key text,
    preferred_gateway text DEFAULT 'paystack' CHECK (preferred_gateway IN ('paystack', 'stripe')),
    webhook_secret text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Expenditures
CREATE TABLE IF NOT EXISTS public.expenditures (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    amount numeric(10,2) NOT NULL,
    category text NOT NULL,
    description text NOT NULL,
    date date DEFAULT CURRENT_DATE,
    recorded_by uuid REFERENCES auth.users(id),
    receipt_url text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Budget Categories
CREATE TABLE IF NOT EXISTS public.budget_categories (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    name text NOT NULL,
    allocated_amount numeric(10,2) DEFAULT 0,
    spent_amount numeric(10,2) DEFAULT 0,
    monthly_limit numeric(10,2),
    academic_year text DEFAULT '2024-2025',
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Communication Tables
-- =========================

-- School Announcements
CREATE TABLE IF NOT EXISTS public.school_announcements (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    author_id uuid REFERENCES auth.users(id),
    author_name text,
    title text NOT NULL,
    message text NOT NULL,
    target_audience text NOT NULL DEFAULT 'All' CHECK (target_audience IN ('All', 'Students', 'Teachers', 'Parents')),
    priority text NOT NULL DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    expires_at timestamp with time zone,
    created_by uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- News Posts (Public content)
CREATE TABLE IF NOT EXISTS public.news_posts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    title text NOT NULL,
    author_id uuid REFERENCES auth.users(id),
    content text NOT NULL,
    excerpt text,
    image_url text,
    author_name text,
    published_at timestamp with time zone,
    created_by uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Admission Applications
CREATE TABLE IF NOT EXISTS public.admission_applications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint NOT NULL REFERENCES public.schools(id) ON DELETE CASCADE,
    full_name text NOT NULL,
    grade_level_applying_for text NOT NULL,
    parent_name text NOT NULL,
    parent_email text,
    parent_phone text,
    father_name text,
    mother_name text,
    guardian_name text,
    guardian_contact text,
    guardian_religion text,
    guardian_location text, 
    student_location text,
    date_of_birth date,
    student_religion text,
    previous_school_name text,
    status text DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    documents jsonb,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    reviewed_by uuid REFERENCES auth.users(id)
);

CREATE TABLE IF NOT EXISTS public.emails(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint REFERENCES public.schools(id) ON DELETE CASCADE,
    sender_name text NOT NULL,
    sender_email text NOT NULL,
    recipient_email text,
    subject text NOT NULL,
    message text NOT NULL,
    html_content text,
    thread_id uuid,
    parent_email_id bigint REFERENCES public.emails(id) ON DELETE SET NULL,
    source text CHECK (source IN ('contact_form', 'user')) DEFAULT 'contact_form',
    email_type text CHECK (email_type IN ('incoming', 'outgoing')) DEFAULT 'incoming',
    sent_at timestamp with time zone DEFAULT now() NOT NULL,
    status text NOT NULL CHECK (status IN ('sent', 'failed', 'pending')),
    read_at timestamp with time zone,
    replied_at timestamp with time zone,
    user_agent text,
    ip_address text,
    attachments jsonb,
    error_message text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
-- =========================
-- System Tables
-- =========================

-- Audit Logs
CREATE TABLE IF NOT EXISTS public.audit_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    school_id bigint REFERENCES public.schools(id) ON DELETE CASCADE,
    action text NOT NULL,
    table_name text,
    record_id text,
    performed_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    target_id text,
    details jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Assistant Logs (AI interactions)
CREATE TABLE IF NOT EXISTS public.assistant_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    school_id bigint REFERENCES public.schools(id) ON DELETE CASCADE,
    conversation_id text,
    message_type text NOT NULL CHECK (message_type IN ('user', 'assistant')),
    content text NOT NULL,
    tokens_used integer DEFAULT 0,
    model_used text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- =========================
-- Indexes
-- =========================

-- Core indexes
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON public.user_roles (user_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_school_id ON public.user_roles (school_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_role ON public.user_roles (role);

-- Invitation indexes
CREATE INDEX IF NOT EXISTS idx_user_invitations_email ON public.user_invitations (lower(email));
CREATE INDEX IF NOT EXISTS idx_user_invitations_user_id ON public.user_invitations (user_id);
CREATE INDEX IF NOT EXISTS idx_user_invitations_school_id ON public.user_invitations (school_id);

-- Academic indexes
CREATE INDEX IF NOT EXISTS idx_students_school_id ON public.students (school_id);
CREATE INDEX IF NOT EXISTS idx_students_auth_user_id ON public.students (auth_user_id);
CREATE INDEX IF NOT EXISTS idx_students_student_id_display ON public.students (student_id_display);

CREATE INDEX IF NOT EXISTS idx_teachers_school_id ON public.teachers (school_id);
CREATE INDEX IF NOT EXISTS idx_teachers_auth_user_id ON public.teachers (auth_user_id);

CREATE INDEX IF NOT EXISTS idx_student_results_school_id ON public.student_results (school_id);
CREATE INDEX IF NOT EXISTS idx_student_results_student_id ON public.student_results (student_id_display);

-- Financial indexes
CREATE INDEX IF NOT EXISTS idx_fee_payments_school_id ON public.fee_payments (school_id);
CREATE INDEX IF NOT EXISTS idx_fee_payments_student_id ON public.fee_payments (student_id_display);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_school_id ON public.payment_transactions (school_id);

-- =========================
-- Unique Constraints
-- =========================

-- Ensure each user has only one profile per role per school
CREATE UNIQUE INDEX IF NOT EXISTS idx_teachers_unique_auth_user_school ON public.teachers (auth_user_id, school_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_students_unique_auth_user_school ON public.students (auth_user_id, school_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_admins_unique_auth_user_school ON public.admins (auth_user_id, school_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_accountants_unique_auth_user_school ON public.accountants (auth_user_id, school_id);

-- Ensure each user has only one role per school
CREATE UNIQUE INDEX IF NOT EXISTS idx_user_roles_unique_user_school ON public.user_roles (user_id, school_id);

-- Ensure no duplicate pending invitations for same email/role/school
CREATE UNIQUE INDEX IF NOT EXISTS idx_invitations_unique_pending 
    ON public.user_invitations (lower(email), role, school_id) 
    WHERE status = 'pending';

-- =========================
-- Functions
-- =========================

-- Helper functions for RLS (bypass RLS to prevent recursion)
CREATE OR REPLACE FUNCTION get_my_role() RETURNS text AS $$
    SELECT role FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1;
$$ LANGUAGE sql SECURITY DEFINER SET row_security = off;

CREATE OR REPLACE FUNCTION get_my_school_id() RETURNS bigint AS $$
    SELECT school_id FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1;
$$ LANGUAGE sql SECURITY DEFINER SET row_security = off;

CREATE OR REPLACE FUNCTION is_my_school_record(record_school_id bigint) RETURNS boolean AS $$
    SELECT get_my_role() = 'super_admin' OR (
        (get_my_role() = 'admin' OR get_my_role() = 'accountant') AND
        get_my_school_id() = record_school_id
    );
$$ LANGUAGE sql SECURITY DEFINER;

-- Platform pricing functions
CREATE OR REPLACE FUNCTION update_school_fees_total()
RETURNS TRIGGER AS $$
BEGIN
    -- Update school_fees table when platform_pricing changes
    UPDATE school_fees 
    SET platform_fee = NEW.platform_fee,
        updated_at = now()
    WHERE grade_level = NEW.grade_level 
    AND academic_year = NEW.academic_year;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for platform pricing updates
CREATE TRIGGER trigger_update_school_fees_on_platform_pricing_change
    AFTER UPDATE ON platform_pricing
    FOR EACH ROW
    EXECUTE FUNCTION update_school_fees_total();

-- Auto-generate receipt numbers
CREATE OR REPLACE FUNCTION generate_receipt_number(school_id_param bigint)
RETURNS text AS $$
DECLARE
    school_prefix text;
    next_num bigint;
    receipt_number text;
BEGIN
    -- Get school prefix and increment counter
    UPDATE schools 
    SET next_receipt_number = next_receipt_number + 1
    WHERE id = school_id_param
    RETURNING payment_receipt_prefix, next_receipt_number 
    INTO school_prefix, next_num;
    
    -- Format receipt number
    receipt_number := COALESCE(school_prefix, 'SCH') || LPAD(next_num::text, 6, '0');
    
    RETURN receipt_number;
END;
$$ LANGUAGE plpgsql;

-- =========================
-- Storage Buckets
-- =========================

INSERT INTO storage.buckets (id, name, public) VALUES ('school-assets', 'school-assets', true) ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES ('assignment-files', 'assignment-files', false) ON CONFLICT (id) DO NOTHING;

-- =========================
-- Initial Platform Pricing Data
-- =========================

INSERT INTO platform_pricing (grade_level, pricing_type, platform_fee, academic_year) VALUES
    ('Nursery', 'per_term', 15.00, '2024-2025'),
    ('KG 1', 'per_term', 15.00, '2024-2025'),
    ('KG 2', 'per_term', 15.00, '2024-2025'),
    ('Primary 1', 'per_term', 25.00, '2024-2025'),
    ('Primary 2', 'per_term', 25.00, '2024-2025'),
    ('Primary 3', 'per_term', 30.00, '2024-2025'),
    ('Primary 4', 'per_term', 35.00, '2024-2025'),
    ('Primary 5', 'per_term', 40.00, '2024-2025'),
    ('Primary 6', 'per_term', 40.00, '2024-2025'),
    ('JHS 1', 'per_term', 50.00, '2024-2025'),
    ('JHS 2', 'per_term', 50.00, '2024-2025'),
    ('JHS 3', 'per_term', 50.00, '2024-2025')
ON CONFLICT (grade_level, academic_year, pricing_type) DO NOTHING;

COMMIT;
